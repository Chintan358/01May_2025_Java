
package : name should be in lowercase
class : name should start with uppercase letter for each word

Datatypes :

byte    0       1 byte   2^7 -1 to -2^7   : 127 to -128
short   0       2 byte   2^15 -1 to -2^15 =
int     0       4 byte
long    0       8 byte

float   0.0     4 byte
double  0.0     8 byte

char            1 byte
boolean false   1 bit

String - class [string is not a primitive datatypes]

1 bit
8 bit - 1 byte
1024 byte - 1 kb
1024 kb - 1 mb
1024 mb - 1 gb
1024 gb - 1 tb

operators :
Arithmatic
Relational
Unary
Logical
Turnary

Statemtns :

conditonal
if-else
switch-case

looping statement
for
while
do-while

control
break
contrine


   *
  * *
 * * *


      *
     * *
    * * *
     * *
      *


      *
     * *
    *   *
     * *
      *


1
12
123
1234
12345

1
2  3
4  5  6
7  8  9  10
11 12 13 14 15


0
10
010
1010
01010

A
BC
DEF
GHIJ
KLMNO


ARRAY :

Collection of same type of data

one - D
multi - D

oops :
object oriented programing

pop :
procedure oriented programming

class
object
inheritance
polymorphism
abstaction
encaptulation


object
Realtime entity
instance of class

class :
logical entity
collection of data member and function meber


state / data member /variables
behaviour / function member /methods

accessmodifier returntype* methodname()
{
    body
}

data member and function member can be of 2 types :
static / class member
non-static [default] / instance member

**********************************************
Inheritance :

create a class using propry of exisiting class :

from where we inherits the property :
parent class/ super class/ base class

in which class we inherits the property :
child class/ sub class/ derived class


single
multiple
multilevel
hirarchicle
hybrid


Access Modifier :

public : everywhere
private : within class only
protected : within package , outside the package in a subclass
default : withing package


Encaptulation :

Polymorphism
one name - many forms

Compiletime - mothodoverloading
Runtime- methodoerriding


Abstraction :

Abstract class :
partial abstraction
-it contains abstract and instance method both

Interface :
fully abstraction
-it contains only abstract methods

Abstract method :
method without body

ex :
public void display();


Instance method
ex :
public void display()
{
    //body
}


*********************************
Imp classes :
String
String buffer
String builder
Wrapper
Object
Math
Random
Date


**********************
FileIO :

stream : flow of data from source to destination

bytestream :
FileInputStream
FileOutputStream

char. stream
FileReader
FileWriter







